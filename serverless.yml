service: hb-api

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java8

  usagePlan:
    quota:
      limit: 30000
      period: DAY
    throttle:
      burstLimit: 20
      rateLimit: 10

  stage: ${opt:stage, 'dev'}
#  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  artifact: target/${self:service}-${self:provider.stage}.jar

functions:
  StatusGet:
    handler: com.tddapps.handlers.StatusGet
    events:
      - http:
          path: /v1/status
          method: get
  HeartBeatPost:
    handler: com.tddapps.handlers.HeartBeatPost
    events:
      - http:
          private: true
          path: /v1/hearbeat
          method: post

plugins:
  - serverless-domain-manager

custom:
  tablePrefix: ${self:service}-${self:provider.stage}-
  domainName: ${opt:domainName, 'hbapidev.tddapps.com'}
  customDomain:
    domainName: ${self:custom.domainName}
    stage: ${self:provider.stage}
    basePath: ''
    createRoute53Record: false

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources:
    StatusGetLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "14"
    HeartBeatPostLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "14"

    HeartBeatsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tablePrefix}heartbeats
        AttributeDefinitions:
          - AttributeName: host_id
            AttributeType: S
        KeySchema:
          - AttributeName: host_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
