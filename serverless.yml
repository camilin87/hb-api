# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: hb-api

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java8

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

  iamRoleStatements:
#    - Effect: Allow
#      Action: sts:AssumeRole
#      Principal:
#        Service:
#          - lambda.amazonaws.com
#          - apigateway.amazonaws.com

#    - Effect: "Allow"
#      Action:
#        - "sqs:SendMessage"
#        - "sqs:ReceiveMessage"
#      Resource:
#        Fn::GetAtt:
#          - HeartBeatsQueue
#          - Arn

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  artifact: target/hb-api-dev.jar

functions:
  status:
    handler: com.tddapps.controllers.Status
    events:
      - http:
          path: /v1/status
          method: get

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources:
    StatusLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "14"
    HeartBeatsQueue:
      Type: "AWS::SQS::Queue"
    ApiGatewayResourceV1Beats:
      Type: "AWS::ApiGateway::Resource"
      Properties:
        ParentId:
          Ref: ApiGatewayResourceV1
        PathPart: beats
        RestApiId:
          Ref: ApiGatewayRestApi
    HeartBeatsApiMethod:
      Type: "AWS::ApiGateway::Method"
      Properties:
        AuthorizationType: "NONE"
        ApiKeyRequired: "true"
        HttpMethod: "POST"
        ResourceId:
          Ref: ApiGatewayResourceV1Beats
        RestApiId:
          Ref: ApiGatewayRestApi
        MethodResponses:
        - StatusCode: 200
        Integration:
          Credentials:
            Fn::GetAtt:
              - IamRoleLambdaExecution
              - Arn
          IntegrationHttpMethod: "POST"
          IntegrationResponses:
          - StatusCode: 200
          Type: "AWS"
          Uri:
            Fn::Join:
              - ''
              -
                - 'arn:aws:apigateway:'
                - Ref: 'AWS::Region'
                - ':sqs:action/SendMessage'
          RequestParameters:
#            integration.request.querystring.QueueUrl:
#              Sub: HeartBeatsQueue
            integration.request.querystring.MessageBody: "method.request.body"